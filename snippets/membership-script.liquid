<script>
  {% if customer %}
  {% else %}
    let popupState = localStorage.getItem('popupState');
    if(popupState == 'already_created_company'){
      let docBody = document.querySelector('body').classList.add('hideMemberPopup');
    }
  {% endif %}
  let pageLocation2 = window.location.pathname;
  let footerHideSection = document.querySelector('.shopify-section:has(.hideFooterSection)');
  if(!pageLocation2.includes('thankyou-form') && !pageLocation2.includes('membership-form') && !pageLocation2.includes('about-bubble') && !pageLocation2.includes('about-bubble-email-members') && !pageLocation2.includes('membership-page')){
    footerHideSection.style.display = 'block';
  }
  
  let test = 'http://localhost:5000';
  let live = 'https://dashboard.icklebubba.com';
  let baseurl = live;
  let setupForm = document.getElementById('setupForm');
  let globalCustomer;

  // Function to check customer status by email
  const checkCustomerByEmail = async(email) =>{
    try {
      const response = await fetch(`${baseurl}/api/get-company-status`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({email:email})
      }); 
      const data = await response.json();
      globalCustomer = data.object ;
      if(response.status == 401){
        localStorage.setItem('popupState',"already_created_company");
      }
      return response.status
    } catch (error) {
      console.log('Error fetching customer data:', error);
    }
  }

  let memberPopup = document.querySelector('.infoPopup');
  let formThankLocation = window.location.pathname;
  let infoPopupClose = document.querySelector('.infoPopupClose');
  
  // Function to check if 24 hours have passed
  function is24HoursPassed(timestamp) {
    const now = new Date().getTime();
    const twentyFourHours = 24 * 60 * 60 * 1000; // milliseconds in 24 hours
    return (now - timestamp) > twentyFourHours;
  }
  
  {% if customer %}
    const userStorageKey = 'userStorageKey';
    const popupClosedAt = localStorage.getItem(userStorageKey);
    if (popupClosedAt) {
      const timestamp = parseInt(popupClosedAt, 10);
      if (isNaN(timestamp) || is24HoursPassed(timestamp)) {
        checkCustomerByEmail({{customer.email | json }}).then((data)=> {
          if(data === 401){
            // if user is created a company then no popup will show
            
          }else{
            if( !formThankLocation.includes('membership-form') && !formThankLocation.includes('thankyou-form') && !formThankLocation.includes('about-bubble-email-members')){
              memberPopup.style.display = 'block';
            } 
          }
        })
      }
      else{
        // nothing will happen bacause time remaining to show popup
      } 
    }else{
      checkCustomerByEmail({{customer.email | json }}).then((data)=> {
          if(data === 401){
            // if user is created a company then no popup will show
          }else{
            if( !formThankLocation.includes('membership-form') && !formThankLocation.includes('thankyou-form') && !formThankLocation.includes('about-bubble-email-members')){
              memberPopup.style.display = 'block';
            } 
          }
        })
    }
  
    infoPopupClose.addEventListener("click", function(e) {
      e.preventDefault();
      memberPopup.style.display = "none";
      const now = new Date().getTime();
      localStorage.setItem(userStorageKey, now.toString());
    });
    
  {% else %}

    let guestStorageKey = 'guestStorageKey';
    const popupClosedAt = localStorage.getItem(guestStorageKey);
    if (popupClosedAt) {
      const timestamp = parseInt(popupClosedAt, 10);
      if (isNaN(timestamp) || is24HoursPassed(timestamp)) {
        if( !formThankLocation.includes('membership-form') && !formThankLocation.includes('thankyou-form') && !formThankLocation.includes('about-bubble-email-members')){
          memberPopup.style.display = 'block';
        }
      }else{
        // nothing will happen bacause time remaining to show popup
      } 
    }else{
      if( !formThankLocation.includes('membership-form') && !formThankLocation.includes('thankyou-form') && !formThankLocation.includes('about-bubble-email-members')){
        memberPopup.style.display = 'block';
      }
    }
    infoPopupClose.addEventListener("click", function(e) {
      e.preventDefault();
      memberPopup.style.display = "none";
      const now = new Date().getTime();
      localStorage.setItem(guestStorageKey, now.toString());
    });
    
  {% endif %}

  // multiple operations
  {% if customer %}
    checkCustomerByEmail({{customer.email | json }}).then((data)=> {
      if(data === 401){
        let questionRelationship = document.querySelector('#setupArea select')
        if(questionRelationship){
          questionRelationship.value = globalCustomer.relationship;
        }
        let questionDuedate = document.querySelector('#setupArea input')
        if(questionDuedate){
          questionDuedate.value = new Date(globalCustomer.dueDate * 1000).toISOString().split('T')[0];
        }
        let bubbleBanner = document.querySelector('.bubbleBanner');
        if(bubbleBanner){
          bubbleBanner.style.display = 'block';
        }
        document.querySelector('.site-nav__link:has(svg.icon-user)').setAttribute('href','/pages/membership-page');

        let collectionBody = document.querySelector('body.template-collection');
        collectionBody ? collectionBody.classList.add('cbpricing') : '' ;
        
        let pdpBody = document.querySelector('body.template-product');
        pdpBody ? pdpBody.classList.add('bubblePricing') : '';
        {% assign contains_no_bubble = false %}
        {% for tag in product.tags %}
          {% if tag contains 'No Bubble' %}
            pdpBody ? pdpBody.classList.add('noBubble') : '';
          {% endif %}
        {% endfor %}
        if(pdpBody){ 

          function observeAttributeChange(element, attributeName, callback) {
              // Create a new MutationObserver instance
              const observer = new MutationObserver((mutationsList) => {
                  for (const mutation of mutationsList) {
                      // Check if the attribute we're interested in has changed
                      if (mutation.type === 'attributes' && mutation.attributeName === attributeName) {
                          const newValue = element.getAttribute(attributeName);
                          callback(newValue);
                      }
                  }
              });
              // Start observing the element for attribute changes
              observer.observe(element, {
                  attributes: true
              });
          }

        // monitor element attribute value
          const variantElement = document.querySelector('div.module[data-current-variant]');
          const urlParams = new URLSearchParams(window.location.search);
          const initialVariant = urlParams.get('variant');
          console.log('url',initialVariant)
          if(initialVariant !== null){
            let rrpArray = document.querySelectorAll('.rrpMetaprice');
            rrpArray.forEach((element)=>{
              element.style.display = 'none';
              element.classList.remove('hasRRP');
            })

            let variantRRP = document.getElementById(`${initialVariant}`);
            if(variantRRP){
              variantRRP.style.display = 'block';
              variantRRP.classList.add('hasRRP');
            }
          }else{
            let rrpArray = document.querySelectorAll('.rrpMetaprice');
            rrpArray.forEach((element)=>{
              element.style.display = 'none';
              element.classList.remove('hasRRP');
            })
            document.querySelectorAll('.rrpMetaprice')[0].style.display = 'block';
            document.querySelectorAll('.rrpMetaprice')[0].classList.add('hasRRP');
          }
          
          observeAttributeChange(variantElement, 'data-current-variant', (newValue) => {
            if(newValue){
                let rrpArray = document.querySelectorAll('.rrpMetaprice');
                rrpArray.forEach((element)=>{
                  element.style.display = 'none';
                  element.classList.remove('hasRRP');
                })
                document.getElementById(`${newValue}`).style.display = 'block';
                document.getElementById(`${newValue}`).classList.add('hasRRP');
              }
            console.log('inf',newValue)
          });
        } 
        // window.onload = function() {
        //   let collectionPrice = document.querySelectorAll('.collectionPrice');
        //   Array.from(collectionPrice).forEach((element)=>{
        //     element.classList.remove('hideCollectionPrice');
        //   })
        // }     
      }else{
        let guestBanner = document.querySelector('.guestBanner');
        if(guestBanner){
          guestBanner.style.display = 'block';
        }
        document.querySelector('.infoPopupMessage').innerHTML = 'You are one step away from Bubble membership - <strong>Complete here!</strong>';
        
      }
    })
  {% else %}
    let guestBanner = document.querySelector('.guestBanner');
    if(guestBanner){
      guestBanner.style.display = 'block';
    }
    // document.querySelector('.infoPopupMessage').innerHTML = '<strong>Sign up</strong> to Bubble to get exclusive offers and more!';
    document.querySelector('.infoPopupMessage').innerHTML = '<strong>Sign up</strong> to Bubble to get an extra 5% off!';
    $(window).on('load', function() {
       $('.gf_swatch.sb_option').click(function(){
           let comparePrice = $('.priceWrapper .gf_product-compare-price');
           let p1d = comparePrice.attr("data-price")
           let originalPrice = $('.priceWrapper #m-1729537535561 .gf_product-price')
           let p2d = originalPrice.attr("data-price")
          console.log('comp',p1d,'orig',p2d)
           if(p1d == p2d){
             comparePrice.text('')
             comparePrice.addClass('no-compare-price')
           }else{
             comparePrice.removeClass('no-compare-price')
           }
      })
    })
  {% endif %}

  
  // Form submission handling
  if (setupForm) {
    setupForm.addEventListener('submit', function(event) {
      event.preventDefault();
      const sendForm = async () => {
        const formData = new FormData(event.target);
        const formObject = {};
        formData.forEach((value, key) => {
          if (key === 'newsletter') {
            formObject[key] = value == "on" ? "TRUE" : "FALSE";
          }else if (key === 'dueDate') {
            const date = new Date(value);
            if (!isNaN(date)) {
              formObject[key] = Math.floor(date.getTime() / 1000);
            }
          }else {
            formObject[key] = value;
          }
        });
        // Safely checking if exponea is defined and accessing the customer cookie
        formObject.customerCookie = typeof exponea !== 'undefined' && exponea.configuration && exponea.configuration.customer && exponea.configuration.customer.cookie ? exponea.configuration.customer.cookie : '';
        let checkStatus = await checkCustomerByEmail(formObject.customerEmail);
        console.log(checkStatus)
        if(checkStatus === 200){
          try {
            const response = await fetch(`${baseurl}/api/create-company`, {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify(formObject)
            });
            const jsonData = await response.json();
             window.location.href = "/pages/thankyou-form";
          } catch (error) {
            console.log('Error in sending form data:', error);
          }
        }else{
            document.querySelector('.membershipformMsg').innerHTML = 'You are already a bubble member.<br><a href="/account">Please log in here</a>';
        }
      };
      document.querySelector('.membershipButton').disabled = true;
      sendForm();
    });
  }
 
// Edit and update button logic
let editBtn = document.querySelector('.editForm svg');
let updateBtn = document.querySelector('#setupArea .membershipAreaButton');

if (editBtn) {
  editBtn.addEventListener('click', function() {
    document.querySelector('#area_relationship').disabled = false;
    document.querySelector('#area_dueDate').disabled = false;
    updateBtn.style.visibility = 'visible';
  });
}

if (updateBtn) {
  updateBtn.addEventListener('click', async (e) => {
    e.preventDefault();
    let rel = document.querySelector('#area_relationship').value;
    let due = document.querySelector('#area_dueDate').value;
  
    if (!rel || !due) {
      alert('Please fill in both fields before submitting.');
      return;
    }

    let obj = { relationship: rel, due: new Date(due).getTime() / 1000, id: globalCustomer._id };

    try {
      document.querySelector('.membershipAreaButton').disabled = true;
      const response = await fetch(`${baseurl}/api/update-company`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(obj)
      });

      if (response.ok) {
        document.querySelector('#area_relationship').disabled = true;
        document.querySelector('#area_dueDate').disabled = true;
        updateBtn.style.visibility = 'hidden';
      } else {
        console.log('Error updating company');
      }
    } catch (error) {
      console.log('Error updating company:', error);
    }
  });
}

  
  </script>
